#!/usr/bin/env python3

# LAIK configure script for:
# - test for packages to automatically enable optional features
# - generate a Makefile.config to enable requested features
# - support out-of-source builds by creating Makefiles if
#   called outside of source directory
#
# Using this script is optional:
# - with Makefile.config empty/non-existing, sensible defaults are used
# - you can modify/create your own Makefile.config

import os
import subprocess
import shutil
import argparse

defs = ""
miscvars = ""
exports = ""
subdirs = "examples"
test_subdirs = ""
ipaths = ["/usr/include", "/usr/local/include"]

cc = ""
# if compiler is specified via CC for configure, use it
if "CC" in os.environ:
    cc = os.environ['CC']

#------------------------------------
# Command line parsing

parser = argparse.ArgumentParser()
parser.add_argument("--no-ucp", help="disable UCP backend", action="store_true")
parser.add_argument("--no-fabric", help="disable Libfabric backend",
        action="store_true")
parser.add_argument("--no-tcp", help="disable TCP backend", action="store_true")
parser.add_argument("--no-mpi", help="disable MPI backend", action="store_true")
parser.add_argument("--no-mqtt", help="disable MQTT support", action="store_true")
args = parser.parse_args()
use_fabric = not args.no_fabric
use_mpi = not args.no_mpi
use_ucp = not args.no_ucp
use_tcp = not args.no_tcp
use_mqtt = not args.no_mqtt

pkgc_found = bool(shutil.which("pkg-config"))
# Enable a backend if pkg-config finds its dependency
# This behaviour is exactly the same for TCP and Libfabric backends,
# thus a common function makes sense
def enable_if_found(name, pkgname, ubuntu, pkgopts=[]):
    global pkgc_found, defs, miscvars, test_subdirs
    if not pkgc_found:
        print("%s backend disabled: pkg-config not found." % (name))
        return

    found = not subprocess.call(['pkg-config'] + pkgopts + [pkgname])
    if not found:
        print("%s backend disabled: %s not found." % (name, pkgname))
        print("  On Ubuntu, install '%s'" % (ubuntu))
        return

    print("%s backend enabled (%s found)." % (name, pkgname))
    pkg_inc = os.popen("pkg-config --cflags %s" % (pkgname)).read().strip()
    pkg_libs = os.popen("pkg-config --libs %s" % (pkgname)).read().strip()
    up = name.upper()
    defs += " -DUSE_%s" % (up)
    miscvars += "USE_%s=1\n" % (up)
    miscvars += "%s_INC=%s\n" % (up, pkg_inc)
    miscvars += "%s_LIBS=%s\n" % (up, pkg_libs)
    test_subdirs += " %s" % (name.lower())

#------------------------------------
# Mosquitto/MQTT

if use_mqtt:
    # check for mosquitto header
    for ipath in ipaths:
        mosq_found = os.path.isfile(ipath + "/mosquitto.h")
        if mosq_found:
            mosq_ipath = ipath
            break
    # check for protobuf header
    # on precise/trusty header is in /usr/include/google
    for ipath in ipaths + ["/usr/include/google"]:
        protobuf_found = os.path.isfile(ipath + "/protobuf-c/protobuf-c.h")
        if protobuf_found:
            protobuf_ipath = ipath
            break
    # check for protobuf compiler
    protoc_found = bool(shutil.which("protoc-c"))

mqtt_enabled = use_mqtt and mosq_found and protobuf_found and protoc_found
if mqtt_enabled:
    print("MQTT support enabled (mosquitto + protobuf found).")
    defs += " -I" + protobuf_ipath + " -I" + mosq_ipath
    subdirs += " external/MQTT"
elif not use_mqtt:
    print("MQTT support disabled.")
else:
    print("MQTT support disabled because:")
    if not mosq_found:
        print(" Mosquitto include file not found.")
        print("  On Ubuntu, install 'libmosquitto-dev' or 'libmosquitto0-dev' (trusty).")
    if not protobuf_found:
        print(" Protobuf C include file not found.")
        print("  On Ubuntu, install 'libprotobuf-c-dev' or 'libprotobuf-c0-dev' (trusty).")
    if not protoc_found:
        print(" Protobuf compiler not found.")
        print("  On Ubuntu, install 'protobuf-c-compiler'")

#------------------------------------
# Agent support: we always enable the Simple Agent
subdirs += " external/simple"

#------------------------------------
# LAIK-internal MPI support

#  check for mpicc, if found we enable MPI
mpicc = ""
if use_mpi:
    if "MPICC" in os.environ:
        mpicc = os.environ['MPICC']
    if not mpicc:
        mpicc = "mpicc"
    mpi_found = bool(shutil.which(mpicc))
if use_mpi and mpi_found:
    print("MPI backend enabled (using '" + mpicc + "' as compiler wrapper).")
    defs += " -DUSE_MPI"
    test_subdirs += " mpi"
    mpiversion = os.popen('mpirun --version').read().strip()
    if "Open MPI" in mpiversion:
        print("  Detected OpenMPI")
        # required for tests with OpenMPI, otherwise tests may fail
        # with "not enough slots" error on small machines
        exports = "export MPIEXEC=mpiexec --oversubscribe --mca btl_base_warn_component_unused 0"
else:
    if not use_mpi:
        print("MPI backend disabled.")
    elif not mpi_found:
        print("MPI backend disabled ('"+ mpicc +"' not found).")
        print("  Install MPI, or point MPICC to the compiler wrapper of an installed MPI.")
        print("  On Ubuntu, install e.g. 'libopenmpi-dev'.")
        mpicc = ""

#------------------------------------
# TCP backend support

if use_tcp:
    enable_if_found("TCP", "gio-2.0", "libglib2.0-dev", ["--atleast-version=2.44"])
else:
    print("TCP backend disabled.")

#------------------------------------
# Libfabric backend support

if use_fabric:
    enable_if_found("Fabric", "libfabric", "libfabric-dev")
else:
    print("Fabric backend disabled.")

#------------------------------------
# TCP2 backend support: always enable
print("TCP2 backend enabled.")
defs += " -DUSE_TCP2"
test_subdirs += " tcp2"

#------------------------------------
# UCP backend support
if use_ucp:
    enable_if_found("UCP", "ucx", "libucx-dev")
else:
    print("UCP backend disabled.")

#------------------------------------
# C++ support
# LAIK does not use C++ itself, but there is a C++ example

cxx = ""
if "CXX" in os.environ:
    cxx = os.environ['CXX']

mycxx = cxx
if not mycxx:
    mycxx = "c++"
cxx_found = bool(shutil.which(mycxx))
if not cxx_found:
    print("C++ compiler not found. C++ examples disabled.")
    print("  Set CXX to specify the C++ compiler.")
else:
    print("C++ support enabled (using '" + mycxx + "' for C++ examples).")
    subdirs += " examples/c++"

#------------------------------------
# how to activate OpenMP with given compiler (for OpenMP in examples)

tname = "/tmp/laiktest.c"
tfile = open(tname, 'w')
tfile.write("#include <omp.h>\nint main(){return 0;}\n")
tfile.close()

ompflag = ""
devnull = open(os.devnull, 'w') # for redirecting stderr
for flag in ['-fopenmp', '-qopenmp']:
    if subprocess.call([cc if cc else 'cc', '-fsyntax-only', flag, tname],
                       stderr=devnull) == 0:
        print("OpenMP activated in examples (using '" + flag + "')");
        ompflag = flag
        break
if not ompflag:
    print("OpenMP not supported by compiler, disabled in examples");

os.remove(tname)

#------------------------------------
# write Makefile.config, will be included by Makefiles

cfile = open("Makefile.config", 'w')
cfile.write("# Generated by 'configure'.\n")
cfile.write("# Changes will be overwritten on next run\n\n")
cfile.write("DEFS=" + defs + "\n")
cfile.write("SUBDIRS=" + subdirs + "\n")
cfile.write("TEST_SUBDIRS=" + test_subdirs + "\n")
if cc:
    print("Setting compiler to '" + cc + "' as requested.")
    cfile.write("CC=" + cc + "\n")
if cxx:
    print("Setting C++ compiler to '" + cxx + "' as requested.")
    cfile.write("CXX=" + cxx + "\n")
if mpicc:
    cfile.write("MPICC=" + mpicc + "\n")
if ompflag:
    cfile.write("OMP_FLAGS=" + ompflag + "\n")
if miscvars:
    cfile.write(miscvars)

if "PREFIX" in os.environ:
    prefix = os.environ['PREFIX']
    cfile.write("PREFIX=" + os.path.abspath(prefix) + "\n")
    print("Setting PREFIX to '" + prefix + "' as requested.")

if "OPT" in os.environ:
    opt = os.environ['OPT']
    cfile.write("OPT=" + opt + "\n")
    print("Setting OPT to '" + opt + "' as requested.")

if "WARN" in os.environ:
    warn = os.environ['WARN']
    cfile.write("WARN=" + warn + "\n")
    print("Setting WARN to '" + warn + "' as requested.")

if exports:
    cfile.write("\n" + exports + "\n")

cfile.close()

print("Generated 'Makefile.config'")

#--------------------------------------
# if build dir != source dir

bdir = os.getcwd()
sdir = os.path.dirname(os.path.realpath(__file__))
if bdir != sdir:
    print("Detected src != build directory")
    # generate a mirror directory hierarchy for generated files
    for dir in ["src", "src/backends", "src/backends/tcp", "src/backends/ucp"
                "examples","examples/c++","external",
                "external/MQTT","external/simple",
                "tests","tests/src","tests/mpi",
                "tests/tcp","tests/tcp2","tests/ucp"]:
        if not os.path.exists(dir):
            os.makedirs(dir)
            print("    created directory '" + dir + "'")
    # generate proxy Makefiles including original ones
    # (this list of directories only has entries when Makefiles exist)
    for dir in ["","examples/","examples/c++/",
                "external/MQTT/", "external/simple/",
                "tests/", "tests/src/", "tests/mpi/",
                "tests/tcp/", "tests/tcp2/", "tests/ucp"]:
        mfile = open(dir + "Makefile", 'w')
        mfile.write("# Generated by 'configure'.\n")
        mfile.write("SDIR=" + sdir + "/" + dir + "\n")
        mfile.write("include $(SDIR)Makefile\n")
        mfile.close()
        print("    generated '" + dir + "Makefile'")

