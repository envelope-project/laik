[general]

# Whether the backend should do the sends in parallel to the receive operations
# backend_async_send = true

# How many connections to keep open concurrently
# client_connections = 16

# How many threads the client can use to send/receive messages
# client_threads = 4

# How many connections to keep open concurrently
# server_connections = 16

# How many threads the server can use to send/receive messages
# server_threads = 4

# How many connections the kernel is allowed to buffer for us
# socket_backlog = 64

# How long a socket may be unavailable for I/O before it is considered broken
# socket_timeout = 10.0

# How big our inbox may grow in bytes
# inbox_size = 16777216

# How big our outbox may grow in bytes
# outbox_size = 16777216

# How often a synchronous message send should be attempted giving up
# send_attempts = 100

# How long to wait after a failed synchronous message send before retrying
# send_delay = 0.1

# How often a message receive should be attempted before giving up
# receive_attempts = 100

# How long to wait for a message receive before sending an active request
# receive_timeout = 0.0

# How long to wait after the first active request before sending another
# receive_delay = 0.1

# Whether to to use asynchronous sends in the MPI_Comm_split operation
# minimpi_async_split = true;

[addresses]
# Where task 0 shall be located (TCP socket)
# 0 = localhost 4444

# Where task 1 shall be located (abstract UNIX socket)
# 1 = foo
