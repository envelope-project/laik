#!/usr/bin/env python

# Configure script for LAIK:
# - tests for required/wanted packages
# - generates a Makefile.config

import os
import subprocess
import distutils.spawn

defs = ""
subdirs = "examples"
test_subdirs = ""
ipath = "/usr/include"

cc = ""
# if compiler is specified via CC for configure, use it
if "CC" in os.environ:
    cc = os.environ['CC']

#------------------------------------
# Mosquitto/MQTT

#  check for mosquitto header
mosq_found = os.path.isfile(ipath + "/mosquitto.h")
#  check for protobuf header
protobuf_found = os.path.isfile(ipath + "/protobuf-c/protobuf-c.h")
if not protobuf_found:
    # on precise/trusty header is in /usr/include/google
    protobuf_found = os.path.isfile(ipath + "/google/protobuf-c/protobuf-c.h")
    if protobuf_found:
        defs += " -I/usr/include/google"
#  check for protobuf compiler
protoc_found = distutils.spawn.find_executable("protoc-c")

mqtt_enabled = mosq_found and protobuf_found and protoc_found
if mqtt_enabled:
    print("MQTT enabled (mosquitto + protobuf found).")
    subdirs += " external/MQTT"
else:
    print("MQTT support disabled:")
    if not mosq_found:
        print(" Mosquitto include file not found.")
        print("  On Ubuntu, install 'libmosquitto-dev' or 'libmosquitto0-dev' (trusty).")
    if not protobuf_found:
        print(" Protobuf C include file not found.")
        print("  On Ubuntu, install 'libprotobuf-c-dev' or 'libprotobuf-c0-dev' (trusty).")
    if not protoc_found:
        print(" Protobuf compiler not found.")
        print("  On Ubuntu, install 'protobuf-c-compiler'")

#------------------------------------
# Agent support: we always enable the Simple Agent
subdirs += " external/simple"

#------------------------------------
# LAIK-internal MPI support

#  check for mpicc, if found we enable MPI
mpicc = ""
if "MPICC" in os.environ:
    mpicc = os.environ['MPICC']
if not mpicc:
    mpicc = "mpicc"
mpi_found = distutils.spawn.find_executable(mpicc)

if not mpi_found:
    print("LAIK MPI backend driver disabled ('"+ mympicc +"' not found).")
    print("  Set MPICC to specify the MPI C compiler wrapper, or install MPI.")
    print("  On Ubuntu, install e.g. 'libopenmpi-dev'.")
    mpicc = ""
else:
    print("MPI enabled (using '" + mpicc + "' as compiler wrapper).")
    defs += " -DUSE_MPI"
    test_subdirs += " mpi"


#------------------------------------
# C++ support
# LAIK does not use C++ itself, but there is a C++ example

cxx = ""
if "CXX" in os.environ:
    cxx = os.environ['CXX']

mycxx = cxx
if not mycxx:
    mycxx = "c++"
cxx_found = distutils.spawn.find_executable(mycxx)
if not cxx_found:
    print("C++ compiler not found. C++ examples disabled.")
    print("  Set CXX to specify the C++ compiler.")
else:
    print("C++ support enabled (using '" + mycxx + "' for C++ examples).")
    subdirs += " examples/c++"

#------------------------------------
# how to activate OpenMP with given compiler (for OpenMP in examples)

tname = "/tmp/laiktest.c"
tfile = open(tname, 'w')
tfile.write("#include <omp.h>\nint main(){return 0;}\n")
tfile.close()

ompflag = ""
for flag in ['-fopenmp', '-qopenmp']:
    if subprocess.call([cc if cc else 'cc', '-fsyntax-only', flag, tname]) == 0:
        print("OpenMP activated in examples (using '" + flag + "')");
        ompflag = flag
        break

os.remove(tname)

#------------------------------------
# write Makefile.config, will be included by Makefiles

cfile = open("Makefile.config", 'w')
cfile.write("# Generated by 'configure'.\n")
cfile.write("# Changes will be overwritten on next run\n\n")
cfile.write("DEFS=" + defs + "\n")
cfile.write("SUBDIRS=" + subdirs + "\n")
cfile.write("TEST_SUBDIRS=" + test_subdirs + "\n")
if cc:
    print("Setting compiler to '" + cc + "' as requested.")
    cfile.write("CC=" + cc + "\n")
if cxx:
    print("Setting C++ compiler to '" + cxx + "' as requested.")
    cfile.write("CXX=" + cxx + "\n")
if mpicc:
    cfile.write("MPICC=" + mpicc + "\n")
if ompflag:
    cfile.write("OMP_FLAGS=" + ompflag + "\n")

if "PREFIX" in os.environ:
    cfile.write("PREFIX=" + os.path.abspath(os.environ['PREFIX']) + "\n")
cfile.close()

print("Generated 'Makefile.config'")
